//
//  main.cpp
//  ProgChallengeC++
//
//  Created by home on 1/7/19.
//  Copyright © 2019 jorgemichaeljones. All rights reserved.
//

#include <iostream>
#include <stack>
#include <string>
#include <algorithm>
#include <functional>
#include <cctype>
#include <locale>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <algorithm>

using namespace std;
void printNaturalNumbers(int n);
void printFibSeqs(int n);
void primeFactors(long long n);
void smallestCommonMultiple();
void largestPalindromicProduct();
void pythagoreanTriplet();
bool palindromeChecker(long n);
bool stringPalindromeChecker(string str);
bool primeChecker(long long n);
bool multipleCheck(int n);
bool pythTripCheck(int a, int b, int c);
int sumOfSquares(int n);
int squareOfSums(int n);
void differenceOfSquares(int num, int num2);
void stringReverse(string str);
void scrambleString(string str);
string * palindromeString(string str);



int main(int argc, const char * argv[]) {
    cout << "Hello World" <<endl;
   // printNaturalNumbers(10);
   // printFibSeqs(1000000);
   // primeFactors(13195474);
    //largestPalindromicProduct();
    //smallestCommonMultiple();
    //sumOfSquares(100);
    //squareOfSums(10);
    //differenceOfSquares(sumOfSquares(100), squareOfSums(100));
    stringReverse("hello");
    scrambleString("hello");
    palindromeString("abbaca");
 
    
   
    return 0;
}

void printNaturalNumbers(int n){
    int multiples = 0; // variable for multiples
    int temp = n;  // variable equal to pass in value
    while(n > 1){   // condition while passed in value is greater than 1, de-increment
         n = n - 1;
        if((n % 3 == 0) ||( n % 5 == 0)){ //if value is a multiple of 3 or 5
       // cout << n << endl;
        multiples = multiples + n;   //sum them up
       // n = n - 1;
        }
    }
    cout << "The sum of all the multiples of 3 and 5 below " << temp << " is " << multiples <<endl; //print output
}

/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
void printFibSeqs(int n){
    int prevTerm = 1; // first term
    int prevPrevTerm = 0; // second term
    int sum = 0; // sum them up
    cout << "______________________________" << endl; // for viewing purposes
    int num = 1; //initalize that num
    //  int temp = n;
    while(num < n ){
        num = prevTerm + prevPrevTerm;
       // cout << num <<endl;
        if(num % 2 == 0) // check to see if its even
            sum = sum + num;
        prevPrevTerm = prevTerm; // second term = first
        prevTerm = num;  //first term = sum of previous two terms
    }
    cout << "The sum of the even-valued terms of the fibonacci sequence below "<< n << " is " << sum <<endl; //print
}
/*
 
 The prime factors of 13195 are 5, 7, 13 and 29.
 
 What is the largest prime factor of the number 600851475143 ?
 */
void primeFactors(long long n){
     cout << "______________________________" << endl;
   // int factors = 0;
    //int count = 0;
    //int num = 0;
    long long temp = 0;
    
    for(long long i = 2; i < n; i++){
        if(n % i == 0){
           // cout <<  i << " is a factor" << endl;
            if(primeChecker(i)){
                cout << i << endl;
                if(temp < i)
                    temp = i;
            }
        }
    }
    cout << "The largest prime factor of " << n << " is " << temp << endl;
}

/* Returns true if the number is a prime */
bool primeChecker(long long n){
    long long count = 2;
   // cout << n << " is in the prime checker" <<  endl;
    while(count < n){
        if (n % count == 0){
            return false;
        }
        //cout << "The count is " << count << endl;
        count ++;
    }
    return true;
}
/* A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 
 Find the largest palindrome made from the product of two 3-digit numbers.
 */
void largestPalindromicProduct(){
    long digit = 999;
    long count = 999;
    long temp = 0;
    long largestProduct = 0;

    
    while(digit > 100){
        temp = digit * count;
        //cout << temp <<endl;
        if(palindromeChecker(temp)== true){
           // cout << "*" <<endl;
            if (largestProduct < temp)
                largestProduct = temp;
            break;
        }
        else{
            count--;
            if (count < 100){
                digit--;
                count = 999;
            }
        }
    }
    cout << "The large Product palindrome of two three digit products is " << largestProduct << " with digits " << digit << " and " << count << endl;
}


/* Returns true if the number is a palindrome */
bool palindromeChecker(long n){
  //  cout << "*" <<endl;
    string str = "";
    string temp = "";
    //long temp = 0;
    //long num = n;
    temp = to_string(n);
    
    
    for(int i = 0; i < temp.length(); i++){
       // cout << "test1: " << temp[i] <<endl;
        str = str + temp[(temp.length()-1)-i];
    }
  //  cout << str.compare(temp) <<endl;
    if (str.compare(temp) == 0)
        return true;
    return false;
}

/*
 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 
 What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
void smallestCommonMultiple(){
    int testValue = 2520;
    while(1){
    if((multipleCheck(testValue))){
        cout << "The smallest positive number that is evenly divible by all of the number from 1 to 20 is " << testValue << endl;
        break;
    }
    else
        testValue = testValue + 20;
    }
}

bool multipleCheck(int n){
    int testCase = 20;
    for(int i = 0; i < 20; i++){
        if(testCase == 0)
            break;
        if(n % testCase != 0)
            return false;
        else
            testCase--;
        
    }
    return true;
    
}
/*
 The sum of the squares of the first ten natural numbers is,
 
 12 + 22 + ... + 102 = 385
 The square of the sum of the first ten natural numbers is,
 
 (1 + 2 + ... + 10)2 = 552 = 3025
 Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 
 Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 
 */

int sumOfSquares(int n){
    int sum = 0;
    for(int i = 0; i <= n; i++){
        sum = sum + (i * i);
    }
   // cout << sum << endl;
    return sum;
}
int squareOfSums(int n){
    int sum = 0;
    for(int i = 0; i <= n; i++){
        sum = sum + i;
    }
    sum = sum * sum;
    //cout << sum << endl;
    return sum;
}
void differenceOfSquares(int num, int num2){
    int results = 0;
    results = num2 - num;
    cout << "The difference of squares is " << results <<endl;
    
}

/*
 A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 
 a2 + b2 = c2
 For example, 32 + 42 = 9 + 16 = 25 = 52.
 
 There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 Find the product abc.
 */
//
//void pythagoreanTriplet(){
//        //a^2 + b^2 -c^2 == 0
//    int a = 2; int b = 3; int c = 4;
//
//
//
//
//
//
//}


bool pythTripCheck(int a, int b, int c){
    
    if(a > b)
        return false;
    else if(b > c)
        return false;
    else if( (a * a) + (b * b) != (c*c))
        return false;
    
    else
        return true;
}
/* take a string and reverse it */
void stringReverse(string str){
    string reversedStr = "";
    for(int i = 0; i < str.length(); i++){
        reversedStr = reversedStr + str[(str.length()-1)-i];
        
    }
    
    cout << "The reversed string is " << reversedStr << endl;
    
}
/* take a string and scramble it */
void scrambleString(string str){
    random_shuffle(str.begin(), str.end());
    cout << "The scrambled string is " << str << endl;
}
/* takes a string and return the palindromes in the string greater than 2
 example string "abbaca" would return ["abba", "bb", "aca"]
 */


string * palindromeString(string str){
    int index = 0;
    static string stringCollection [10]; //should be a vector
    string tempString = "";
    for(int i = 0; i < str.length(); i++){
        tempString = tempString + str[i];
        if(tempString.length()>1){
            if(stringPalindromeChecker(tempString)){
                cout << "Located a palindrome in string " << str << ": " << tempString <<endl;
                stringCollection[index] = tempString;
                index++;
            }
        }
        
    }

    for(int i = 0; i < sizeof(stringCollection); i++)
        cout << stringCollection[i] << endl;
    return stringCollection;
}
/* returns true if a string is a palindrome */
bool stringPalindromeChecker(string str){
    string reversedStr = "";
    for(int i = 0; i < str.length(); i++){
        reversedStr = reversedStr + str[(str.length()-1)-i];

    }
    if (str.compare(reversedStr) == 0)
        return true;
    else
        return false;

}
